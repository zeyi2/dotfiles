#!/bin/tcc -run

#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(int argc, char** argv) {
    if (argc != 2) {
        fprintf(stderr, "usage: getip <url>\n");
        return 1;
    }

    int code;
    struct addrinfo *res, hints, *p;
    char ipstr[INET6_ADDRSTRLEN];

    memset(&hints, 0, sizeof(hints));
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_family = AF_UNSPEC;

    if ((code = getaddrinfo(argv[1], "80", &hints, &res)) != 0) {
        fprintf(stderr, "%s", gai_strerror(code));
        return 1;
    }

    printf("ip of %s\n", argv[1]);
    for (p = res; p != NULL; p = p->ai_next) {
        void *addr;
        char *type;
        if (p->ai_family == AF_INET) {
            struct sockaddr_in *ipv4 = (struct sockaddr_in*)p->ai_addr;
            addr = &(ipv4->sin_addr);
            type = "ipv4: ";
        } else {
            struct sockaddr_in6 *ipv6 = (struct sockaddr_in6*)p->ai_addr;
            addr = &(ipv6->sin6_addr);
            type = "ipv6: ";
        }
        inet_ntop(p->ai_family, addr, ipstr, sizeof(ipstr));
        printf("\t%s %s\n", type, ipstr);
    }

    freeaddrinfo(res);
    return 0;
}
